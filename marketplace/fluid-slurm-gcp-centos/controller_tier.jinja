{% import "path_utils.jinja" as path_utils with context %}

{% set instanceCount = properties["instanceCount"] %}
{% set zone = properties["zone"] %}
{% set region = properties["zone"].split('-')[0:2]|join('-') %}
{% set machineType = properties["machineType"] %}
{% set networks = [] %}
{% for network in properties["network"] %}
{% set _ = networks.append(path_utils.networkPath(network)) %}
{% endfor %}
{% set subnetworks = properties["subnetwork"] %}
{% set externalIPs = properties["externalIP"] %}
{% set bootDiskType = properties["bootDiskType"] %}
{% set bootDiskSizeGb = properties["bootDiskSizeGb"] %}
{% set hasExternalIP = externalIPs is defined and externalIPs[0] != "NONE" %}
{# Software status only works if the VM has an external IP. #}
{% set enableStatusWaiter = hasExternalIP %}
{% set enableComputeApi = properties["enableComputeApi"] %}
{% if instanceCount <= 0 %}
resources: []
{% else %}
resources:
  - name: {{ env["deployment"] }}-controller-tmpl
    type: vm_instance.py
    properties:
      instanceName: {{ env["deployment"] }}-controller
      sourceImage: https://www.googleapis.com/compute/v1/projects/fluid-cluster-ops/global/images/fluid-slurm-gcp-controller-centos-v2-6
      zone: {{ zone }}
      machineType: {{ machineType }}
      networks:
      {% for network in networks %}
        - {{ network }}
      {% endfor %}
      {% if subnetworks is defined and subnetworks %}
      subnetworks:
      {% for subnetwork in subnetworks %}
        - {{ subnetwork or '' }}
      {% endfor %}
      {% endif %}
      {% if externalIPs is defined and externalIPs %}
      externalIPs:
      {% for externalIP in externalIPs %}
        - {{ externalIP }}
      {% endfor %}
      {% endif %}
      bootDiskType: {{ bootDiskType }}
      bootDiskSizeGb: {{ bootDiskSizeGb }}
      serviceAccounts:
        - email: default
          scopes:
            - 'https://www.googleapis.com/auth/cloud-platform'
      metadata:
        items:
          - key: enable-oslogin
            value: "TRUE"
          - key: startup-script
            value: |
              {{ imports["startup-script.sh"]|indent(14)|replace("@INSTANCE_TYPE@","controller")|replace("@CLUSTER_NAME@",env["deployment"])|replace("@DISABLE_HYPERTHREADING@",False)|replace("@ZONE@",properties["zone"]) }}
          - key: cluster-config
            value: |
              {{ imports["cluster-config.json"]|indent(14)|replace("@CLUSTER_NAME@",env["deployment"])|replace("@VPC_SUBNET@",properties["subnetwork"][0])|replace("@CLUSTER_NAME@",env["deployment"])|replace("@PROJECT@",env["project"])|replace("@REGION@",region)|replace("@ZONE@",properties["zone"])|replace("@PARTITIONS@",properties["partitions"])|replace("@PARTITION_NAME@",properties["partitions"][0]["name"]) }}

outputs:
  {% for vmIndex in range(instanceCount) %}
  - name: vmId{{ vmIndex }}
    value: $(ref.{{ env["deployment"] }}-controller.id)
  - name: vmExternalIP{{ vmIndex }}
    {% if hasExternalIP %}
    value: $(ref.{{ env["deployment"] }}-controller-tmpl.ip)
    {% else %}
    value: NONE
    {% endif %}
  - name: vmInternalIP{{ vmIndex }}
    value: $(ref.{{ env["deployment"] }}-controller-tmpl.internalIP)
  - name: vmName{{ vmIndex }}
    value: {{ env["deployment"] }}-controller
  - name: vmSelfLink{{ vmIndex }}
    value: $(ref.{{ env["deployment"] }}-controller.selfLink)
  {% endfor %}
  - name: hasExternalIP
    value: {{ hasExternalIP }}
{% endif %}
